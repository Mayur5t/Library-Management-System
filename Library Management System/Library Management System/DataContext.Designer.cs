//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2/8/2022 11:31:17 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace LibraryManagementContext
{

    [DatabaseAttribute(Name = "Library Management")]
    [ProviderAttribute(typeof(Devart.Data.SqlServer.Linq.Provider.SqlDataProvider))]
    public partial class LibraryManagementDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(LibraryManagementDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertBookDetail(BookDetail instance);
        partial void UpdateBookDetail(BookDetail instance);
        partial void DeleteBookDetail(BookDetail instance);
        partial void InsertBookIssue(BookIssue instance);
        partial void UpdateBookIssue(BookIssue instance);
        partial void DeleteBookIssue(BookIssue instance);
        partial void InsertSignUp(SignUp instance);
        partial void UpdateSignUp(SignUp instance);
        partial void DeleteSignUp(SignUp instance);

        #endregion

        public LibraryManagementDataContext() :
        base(@"Data Source=LAPTOP-G23UFKK3\SQLEXPRESS;Initial Catalog=""Library Management"";Integrated Security=True;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public LibraryManagementDataContext(MappingSource mappingSource) :
        base(@"Data Source=LAPTOP-G23UFKK3\SQLEXPRESS;Initial Catalog=""Library Management"";Integrated Security=True;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public LibraryManagementDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public LibraryManagementDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public LibraryManagementDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public LibraryManagementDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<BookDetail> BookDetails
        {
            get
            {
                return this.GetTable<BookDetail>();
            }
        }

        public Devart.Data.Linq.Table<BookIssue> BookIssues
        {
            get
            {
                return this.GetTable<BookIssue>();
            }
        }

        public Devart.Data.Linq.Table<SignUp> SignUps
        {
            get
            {
                return this.GetTable<SignUp>();
            }
        }
    }
}

namespace LibraryManagementContext
{

    /// <summary>
    /// There are no comments for LibraryManagementContext.BookDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.BookDetails")]
    public partial class BookDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _BookId;

        private string _BookName;

        private string _Author;

        private string _Publisher;

        private int? _Price;

        private int? _NumberOfCopies;
        #pragma warning restore 0649

        private EntitySet<BookIssue> _BookIssues;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnBookIdChanging(int value);
        partial void OnBookIdChanged();
        partial void OnBookNameChanging(string value);
        partial void OnBookNameChanged();
        partial void OnAuthorChanging(string value);
        partial void OnAuthorChanged();
        partial void OnPublisherChanging(string value);
        partial void OnPublisherChanged();
        partial void OnPriceChanging(int? value);
        partial void OnPriceChanged();
        partial void OnNumberOfCopiesChanging(int? value);
        partial void OnNumberOfCopiesChanged();
        #endregion

        public BookDetail()
        {
            this._BookIssues = new EntitySet<BookIssue>(new Action<BookIssue>(this.attach_BookIssues), new Action<BookIssue>(this.detach_BookIssues));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BookId in the schema.
        /// </summary>
        [Column(Storage = "_BookId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int BookId
        {
            get
            {
                return this._BookId;
            }
            set
            {
                if (this._BookId != value)
                {
                    this.OnBookIdChanging(value);
                    this.SendPropertyChanging("BookId");
                    this._BookId = value;
                    this.SendPropertyChanged("BookId");
                    this.OnBookIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BookName in the schema.
        /// </summary>
        [Column(Storage = "_BookName", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string BookName
        {
            get
            {
                return this._BookName;
            }
            set
            {
                if (this._BookName != value)
                {
                    this.OnBookNameChanging(value);
                    this.SendPropertyChanging("BookName");
                    this._BookName = value;
                    this.SendPropertyChanged("BookName");
                    this.OnBookNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Author in the schema.
        /// </summary>
        [Column(Storage = "_Author", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Author
        {
            get
            {
                return this._Author;
            }
            set
            {
                if (this._Author != value)
                {
                    this.OnAuthorChanging(value);
                    this.SendPropertyChanging("Author");
                    this._Author = value;
                    this.SendPropertyChanged("Author");
                    this.OnAuthorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Publisher in the schema.
        /// </summary>
        [Column(Storage = "_Publisher", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Publisher
        {
            get
            {
                return this._Publisher;
            }
            set
            {
                if (this._Publisher != value)
                {
                    this.OnPublisherChanging(value);
                    this.SendPropertyChanging("Publisher");
                    this._Publisher = value;
                    this.SendPropertyChanged("Publisher");
                    this.OnPublisherChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Storage = "_Price", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging("Price");
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NumberOfCopies in the schema.
        /// </summary>
        [Column(Storage = "_NumberOfCopies", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? NumberOfCopies
        {
            get
            {
                return this._NumberOfCopies;
            }
            set
            {
                if (this._NumberOfCopies != value)
                {
                    this.OnNumberOfCopiesChanging(value);
                    this.SendPropertyChanging("NumberOfCopies");
                    this._NumberOfCopies = value;
                    this.SendPropertyChanged("NumberOfCopies");
                    this.OnNumberOfCopiesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BookIssues in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="BookDetail_BookIssue", Storage="_BookIssues", ThisKey="BookId", OtherKey="BookId", DeleteRule="NO ACTION")]
        public EntitySet<BookIssue> BookIssues
        {
            get
            {
                return this._BookIssues;
            }
            set
            {
                this._BookIssues.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_BookIssues(BookIssue entity)
        {
            this.SendPropertyChanging("BookIssues");
            entity.BookDetail = this;
        }
    
        private void detach_BookIssues(BookIssue entity)
        {
            this.SendPropertyChanging("BookIssues");
            entity.BookDetail = null;
        }
    }

    /// <summary>
    /// There are no comments for LibraryManagementContext.BookIssue in the schema.
    /// </summary>
    [Table(Name = @"dbo.BookIssue")]
    public partial class BookIssue : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IssueId;

        private int? _BookId;

        private int? _UserId;

        private System.DateTime? _IssueDate;

        private System.DateTime? _ReturnDate;
        #pragma warning restore 0649

        private EntityRef<BookDetail> _BookDetail;

        private EntityRef<SignUp> _SignUp;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIssueIdChanging(int value);
        partial void OnIssueIdChanged();
        partial void OnBookIdChanging(int? value);
        partial void OnBookIdChanged();
        partial void OnUserIdChanging(int? value);
        partial void OnUserIdChanged();
        partial void OnIssueDateChanging(System.DateTime? value);
        partial void OnIssueDateChanged();
        partial void OnReturnDateChanging(System.DateTime? value);
        partial void OnReturnDateChanged();
        #endregion

        public BookIssue()
        {
            this._BookDetail  = default(EntityRef<BookDetail>);
            this._SignUp  = default(EntityRef<SignUp>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IssueId in the schema.
        /// </summary>
        [Column(Name = @"Issue_Id", Storage = "_IssueId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IssueId
        {
            get
            {
                return this._IssueId;
            }
            set
            {
                if (this._IssueId != value)
                {
                    this.OnIssueIdChanging(value);
                    this.SendPropertyChanging("IssueId");
                    this._IssueId = value;
                    this.SendPropertyChanged("IssueId");
                    this.OnIssueIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BookId in the schema.
        /// </summary>
        [Column(Storage = "_BookId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? BookId
        {
            get
            {
                return this._BookId;
            }
            set
            {
                if (this._BookId != value)
                {
                    if (this._BookDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBookIdChanging(value);
                    this.SendPropertyChanging("BookId");
                    this._BookId = value;
                    this.SendPropertyChanged("BookId");
                    this.OnBookIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Storage = "_UserId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    if (this._SignUp.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging("UserId");
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IssueDate in the schema.
        /// </summary>
        [Column(Storage = "_IssueDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? IssueDate
        {
            get
            {
                return this._IssueDate;
            }
            set
            {
                if (this._IssueDate != value)
                {
                    this.OnIssueDateChanging(value);
                    this.SendPropertyChanging("IssueDate");
                    this._IssueDate = value;
                    this.SendPropertyChanged("IssueDate");
                    this.OnIssueDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReturnDate in the schema.
        /// </summary>
        [Column(Storage = "_ReturnDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? ReturnDate
        {
            get
            {
                return this._ReturnDate;
            }
            set
            {
                if (this._ReturnDate != value)
                {
                    this.OnReturnDateChanging(value);
                    this.SendPropertyChanging("ReturnDate");
                    this._ReturnDate = value;
                    this.SendPropertyChanged("ReturnDate");
                    this.OnReturnDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BookDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="BookDetail_BookIssue", Storage="_BookDetail", ThisKey="BookId", OtherKey="BookId", IsForeignKey=true)]
        public BookDetail BookDetail
        {
            get
            {
                return this._BookDetail.Entity;
            }
            set
            {
                BookDetail previousValue = this._BookDetail.Entity;
                if ((previousValue != value) || (this._BookDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("BookDetail");
                    if (previousValue != null)
                    {
                        this._BookDetail.Entity = null;
                        previousValue.BookIssues.Remove(this);
                    }
                    this._BookDetail.Entity = value;
                    if (value != null)
                    {
                        this._BookId = value.BookId;
                        value.BookIssues.Add(this);
                    }
                    else
                    {
                        this._BookId = default(int?);
                    }
                    this.SendPropertyChanged("BookDetail");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SignUp in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SignUp_BookIssue", Storage="_SignUp", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
        public SignUp SignUp
        {
            get
            {
                return this._SignUp.Entity;
            }
            set
            {
                SignUp previousValue = this._SignUp.Entity;
                if ((previousValue != value) || (this._SignUp.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SignUp");
                    if (previousValue != null)
                    {
                        this._SignUp.Entity = null;
                        previousValue.BookIssues.Remove(this);
                    }
                    this._SignUp.Entity = value;
                    if (value != null)
                    {
                        this._UserId = value.UserId;
                        value.BookIssues.Add(this);
                    }
                    else
                    {
                        this._UserId = default(int?);
                    }
                    this.SendPropertyChanged("SignUp");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for LibraryManagementContext.SignUp in the schema.
    /// </summary>
    [Table(Name = @"dbo.SignUp")]
    public partial class SignUp : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserId;

        private string _UserName;

        private string _Password;
        #pragma warning restore 0649

        private EntitySet<BookIssue> _BookIssues;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        #endregion

        public SignUp()
        {
            this._BookIssues = new EntitySet<BookIssue>(new Action<BookIssue>(this.attach_BookIssues), new Action<BookIssue>(this.detach_BookIssues));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Name = @"User_Id", Storage = "_UserId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging("UserId");
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [Column(Name = @"User_Name", Storage = "_UserName", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging("UserName");
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Storage = "_Password", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BookIssues in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SignUp_BookIssue", Storage="_BookIssues", ThisKey="UserId", OtherKey="UserId", DeleteRule="NO ACTION")]
        public EntitySet<BookIssue> BookIssues
        {
            get
            {
                return this._BookIssues;
            }
            set
            {
                this._BookIssues.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_BookIssues(BookIssue entity)
        {
            this.SendPropertyChanging("BookIssues");
            entity.SignUp = this;
        }
    
        private void detach_BookIssues(BookIssue entity)
        {
            this.SendPropertyChanging("BookIssues");
            entity.SignUp = null;
        }
    }

}
